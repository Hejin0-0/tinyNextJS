# 3 - 0. Introduction

Movie API
https://nomad-movies.nomadcoders.workers.dev

JSON Viewer (구글 확장프로그램)
https://chromewebstore.google.com/detail/json-viewer/gbmdgpbipfallnflgajpaliibnhdgobh


# 3 - 1. Client Side



# 3 - 2. Server Side
fetch - 서버로 네트워크 요청을 보내고 응답을 받을 수 있도록 해주는 매서드
Next.js는 기본 웹 fetch() API를 확장하여 서버의 각 요청이 자체 영구 캐싱 의미를 설정할 수 있도록 합니다.
https://nextjs.org/docs/app/api-reference/functions/fetch

Error Lens
VSCode에서 오류, 경고 및 기타 언어 진단을 강조하여 표시해주는 익스텐션
https://marketplace.visualstudio.com/items?itemName=usernamehw.errorlens


# 3 - 3. Loading Components
Loading UI and Streaming

특수 파일 loading.js는 React Suspense를 사용하여 의미 있는 로딩 UI를 만드는 데 도움이 됩니다.
이 규칙을 사용하면 route 세그먼트의 콘텐츠가 로드되는 동안 서버에서 즉시 로딩 상태를 표시할 수 있습니다. 렌더링이 완료되면 새 콘텐츠가 자동으로 교체됩니다.
즉시 로딩 상태는 탐색 시 즉시 표시되는 대체 UI입니다. 스켈레톤, 스피너 등 로딩 표시기나 표지 사진, 제목 등 미래 화면의 작지만 의미 있는 부분을 미리 렌더링할 수 있습니다.
page.tsx 혹은 jsx와 같은 위치에 있어야 하며, 만약 (home)의 page.tsx가 HomePage라면 loading.tsx는 HomePage에 대해서만 작동한다.

https://nextjs.org/docs/app/building-your-application/routing/loading-ui-and-streaming


# 3 - 4. Parallel Requests

Promise.all()

순회 가능한 객체에 주어진 모든 프로미스가 이행한 후, 혹은 프로미스가 주어지지 않았을 때 이행하는 Promise를 반환합니다.
일반적으로 다음 코드를 계속 실행하기 전에 서로 연관된 비동기 작업 여러 개가 모두 이행되어야 하는 경우에 사용됩니다.
입력 값으로 들어온 프로미스 중 하나라도 거부 당하면 Promise.all()은 즉시 거부합니다.

https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Promise/all


# 3 - 5. Suspense



# 3 - 6. Recap



# 3 - 7. Error Handling



# 3 - 8. Conclusions