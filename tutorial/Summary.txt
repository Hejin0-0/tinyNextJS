#2 - 1. Defining Routes

- Creating Routes
Next.js는 폴더를 사용하여 경로를 정의하는 파일 시스템 기반 라우터를 사용합니다.
각 폴더는 URL 세그먼트에 매핑되는 경로 세그먼트를 나타냅니다.
중첩된 경로를 만들려면 폴더를 서로 중첩하면 됩니다.
ex) app/dashboard/setting/page.tsx

- Creating UI
각 경로 세그먼트에 대한 UI를 생성하는 데 특수 파일 규칙이 사용됩니다. 가장 일반적인 것은 경로에 고유한 UI를 표시하는 페이지와 여러 경로에서 공유되는 UI를 표시하는 레이아웃입니다.
예를 들어 첫 번째 페이지를 만들려면 앱 디렉터리 내에 page.js 파일을 추가하고 React 구성 요소를 내보냅니다.
ex) app/page.tsx

https://nextjs.org/docs/app/building-your-application/routing/defining-routes


# 2 - 2. Not Found Routes

- Not Found
찾을 수 없는 파일은 경로 세그먼트 내에서 notFound 함수가 실행될 때 UI를 렌더링하는 데 사용됩니다. 사용자 정의 UI 제공과 함께 Next.js는 스트리밍된 응답의 경우 200 HTTP 상태 코드를 반환하고 스트리밍되지 않은 응답의 경우 404를 반환합니다.
NextJS v13.3.0 => Root app/not-found은 일치하지 않는 전역 URL을 처리합니다.
https://nextjs.org/docs/app/api-reference/file-conventions/not-found

- usePathname
usePathname은 현재 URL의 pathname을 읽을 수 있게 해주는 클라이언트 컴포넌트 훅입니다.
```
'use client'

import { usePathname } from 'next/navigation'

export default function ExampleClientComponent() {
const pathname = usePathname()
return Current pathname: {pathname}
}
```
https://nextjs.org/docs/app/api-reference/functions/use-pathname

React client hook in Server Component 오류
서버 컴포넌트에서 React 클라이언트 훅을 사용하고 있습니다.
https://nextjs.org/docs/messages/react-client-hook-in-server-component


# 2 - 3. SSR vs CSR

렌더링 / Rendering 이란?
NextJS가 리액트 컴포넌트를 브라우저가 이해할 수 있는 html로 변환하는 작업

CSR - Client Side Rendering
모든 렌더링이 클라이언트 측에서 발생
클라이언트는 자바스크립트를 로드하고, 자바스크립트가 UI를 빌드함

SSR - Server Side Rendering
NextJS로 웹 사이트를 빌드할 때, 기본적으로 SSR을 사용함

Nextjs에서 모든 컴포넌트와 페이지들은 먼저 서버(Backend)에서 렌더됨
('use client' 사용 여부와 상관없음)